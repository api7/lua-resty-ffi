daemon off;
error_log /dev/stderr info;
worker_processes auto;
env LD_LIBRARY_PATH;
env RUST_BACKTRACE=1;

events {}

http {
    init_worker_by_lua_block {
        require("protoc").new():loadfile("helloworld.proto")
    }

    server {
        listen 10000;

        location /echo {
            content_by_lua_block {
                local cjson = require("cjson")
                local cfg = { name = "hello", value = "world", flag = 200 }
                local demo = ngx.load_nonblocking_ffi("echo", cjson.encode(cfg))
                local ok, res = demo:echo("foobar")
                assert(ok)
                assert(res == "foobar")

                demo:__unload()
                ok, res = demo:echo("foobar")
                assert(not ok)
                ngx.log(ngx.ERR, res)

                ngx.say("ok")
            }
        }

        location /grpc {
            content_by_lua_block {
                local pb = require("pb")
                local cjson = require("cjson")

                local grpc = ngx.load_nonblocking_ffi("grpc_client")
                local ok, cli = grpc:connect(cjson.encode({cmd = 0, key = "http://[::1]:50051"}))
                assert(ok)

                local req = {name = "foobar"}

                ngx.update_time()
                local t1 = ngx.now()
                for _ = 1,10000 do
                local ok, res = grpc:call(cjson.encode({
                    cmd = 2,
                    key = cli,
                    path = "/helloworld.Greeter/SayHello",
                    payload = ngx.encode_base64(pb.encode("helloworld.HelloRequest", req)),
                }))
                assert(ok)
                res = pb.decode("helloworld.HelloReply", res)
                --assert(res.message == "Hello foobar!")
                end
                ngx.update_time()
                local t2 = ngx.now()
                ngx.say(t2-t1)

                local ok = grpc:remove(cjson.encode({cmd = 1, key = cli}))
                assert(ok)

                ngx.say("ok")
            }
        }
    }
}

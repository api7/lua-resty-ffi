error_log /dev/stderr info;
worker_processes auto;
env LD_LIBRARY_PATH;
env CLASSPATH;
env PYTHONPATH;

events {}

http {
    server {
        listen 10000;

        location / {
            content_by_lua_block {
                ngx.say("----Java----")
                local demo = ngx.load_nonblocking_ffi("lib_nonblocking_ffi_java.so", "demo/http2/App,init,")
                local ok, res = demo:send([[ {"method": "GET", "uri": "https://httpbin.org/anything/get", "body": "foobar"} ]])
                assert(ok)
                local cjson = require("cjson")
                res = cjson.decode(res)
                for k, v in pairs(res.headers) do
                    ngx.say(k, ": ", v)
                end
                ngx.say(res.body)

                ngx.say("----Python3----")
                local opts = {is_global = true}
                local demo = ngx.load_nonblocking_ffi("lib_nonblocking_ffi_python3.so",
                    [[nffi_kafka,init,{"servers":"localhost:9092", "topic":"foobar", "group_id": "foobar"}]], opts)
                local ok, res
                ok, res = demo:produce([[{"type":"produce", "msg":"hello"}]])
                assert(ok)
                ok, res = demo:produce([[{"type":"produce", "msg":"world"}]])
                assert(ok)
                ngx.sleep(2)
                ok, res = demo:consume([[{"type":"consume"}]])
                assert(ok)
                ngx.say(res)

                ngx.say("----Golang----")
                local demo = ngx.load_nonblocking_ffi("lib_nonblocking_ffi_go_etcd.so", "[\"localhost:2379\"]")
                ngx.thread.spawn(function()
                    local ok, res = demo:watch([[{
                        "type": "watch",
                        "payload": {
                            "prefix": "/foo",
                            "key": "/foo/bar"
                        }
                    }]])
                    assert(ok)
                    ngx.say(res)
                    ngx.flush(true)
                end)
                ngx.sleep(2)
                assert(demo:put([[{
                    "type": "put",
                    "payload": {
                        "key": "/foo/bar",
                        "value": "foobar"
                    }
                }]]))
                ngx.sleep(2)
            }
        }
    }
}

daemon off;
error_log /dev/stderr info;
worker_processes auto;
env LD_LIBRARY_PATH;

events {}

http {
    server {
        listen 20000;

        location /echo {
            content_by_lua_block {
                local demo = ngx.load_ffi("ffi_go_echo")
                local ok, res = demo:echo("foobar")
                assert(ok)
                assert(res == "foobar")

                demo:__unload()
                ok, res = demo:echo("foobar")
                assert(not ok)
                ngx.log(ngx.ERR, res)

                ngx.say("ok")
            }
        }

        location /etcd {
            content_by_lua_block {
                local demo = ngx.load_ffi("ffi_go_etcd", "[\"localhost:2379\"]")
                ngx.thread.spawn(function()
                    local ok, res = demo:watch([[{
                        "type": "watch",
                        "payload": {
                            "prefix": "/foo",
                            "key": "/foo/bar"
                        }
                    }]])
                    assert(ok)
                    ngx.say(res)
                    ngx.flush(true)
                end)
                ngx.sleep(2)
                assert(demo:put([[{
                    "type": "put",
                    "payload": {
                        "key": "/foo/bar",
                        "value": "foobar"
                    }
                }]]))
                ngx.sleep(2)
            }
        }

        location /benchmark {
            content_by_lua_block {
                local n = ngx.var.arg_times or 100000
                local arr = ngx.var.arg_arr
                local t = {16, 128, 1024, 1024*10, 1024*100}
                if arr then
                    t = {}
                    for str in string.gmatch(arr, "([^,]+)") do
                        table.insert(t, tonumber(str))
                    end
                end
                require("benchmark").run(n, t)
            }
        }
    }
}

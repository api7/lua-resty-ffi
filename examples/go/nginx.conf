daemon off;
error_log /dev/stderr info;
worker_processes auto;
env LD_LIBRARY_PATH;

events {}

http {
    server {
        listen 20000;

        location /echo {
            content_by_lua_block {
                local demo = ngx.load_ffi("ffi_go_echo")
                local ok, res = demo:echo("foobar")
                assert(ok)
                assert(res == "foobar")

                demo:__unload()
                ok, res = demo:echo("foobar")
                assert(not ok)
                ngx.log(ngx.ERR, res)

                ngx.say("ok")
            }
        }

        location /etcd {
            content_by_lua_block {
                local demo = ngx.load_ffi("ffi_go_etcd", "[\"localhost:2379\"]")
                ngx.thread.spawn(function()
                    local ok, res = demo:watch([[{
                        "type": "watch",
                        "payload": {
                            "prefix": "/foo",
                            "key": "/foo/bar"
                        }
                    }]])
                    assert(ok)
                    ngx.say(res)
                    ngx.flush(true)
                end)
                ngx.sleep(2)
                assert(demo:put([[{
                    "type": "put",
                    "payload": {
                        "key": "/foo/bar",
                        "value": "foobar"
                    }
                }]]))
                ngx.sleep(2)
            }
        }

        location /ffi_benchmark {
            content_by_lua_block {
                math.randomseed(os.time())
                local function random_str(length)
                    local res = ""
                    for i = 1, length do
                        res = res .. string.char(math.random(97, 122))
                    end
                    return res
                end

                local cjson = require("cjson")
                local times = 100000
                local len_arr = {5, 32, 128, 512, 1024, 4096}
                ngx.say("loop times=", times, ", lengths=", cjson.encode(len_arr))
                ngx.flush(true)

                for _, blen in ipairs(len_arr) do
                    local buf = random_str(blen)
                    local buflen = #buf
                    assert(buflen==blen)
                    ngx.say("-- benchmark len=", buflen)

                    local demo = ngx.load_ffi("ffi_go_echo")
                    ngx.update_time()
                    local t1 = ngx.now()
                    for _ = 1,times do
                        local ok, res = demo:echo(buf)
                        assert(ok)
                        assert(res==buf)
                    end
                    ngx.update_time()
                    local t2 = ngx.now()
                    ngx.say("ffi: ", t2-t1)
                    ngx.flush(true)

                    local demo = ngx.load_ffi("ffi_go_echo", "uds")
                    local sock = ngx.socket.tcp()
                    local ok, err = sock:connect("unix:/tmp/echo.sock")
                    assert(ok)
                    ngx.update_time()
                    local t1 = ngx.now()
                    for _ = 1,times do
                        local sent = sock:send(buf)
                        assert(sent==buflen)
                        local data = sock:receive(buflen)
                        assert(data==buf)
                    end
                    ngx.update_time()
                    local t2 = ngx.now()
                    ngx.say("uds: ", t2-t1)
                    sock:close()
                    ngx.flush(true)
                end
            }
        }
    }
}
